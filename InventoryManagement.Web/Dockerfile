# See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

# This stage is used when running from VS in fast mode (Default for Debug configuration)
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER $APP_UID
WORKDIR /app
EXPOSE 80
EXPOSE 443


# This stage is used to build the service project
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["InventoryManagement.Web/InventoryManagement.Web.csproj", "InventoryManagement.Web/"]
COPY ["NotificationService.Application/NotificationService.Application.csproj", "NotificationService.Application/"]
COPY ["NotificationService.Domain/NotificationService.Domain.csproj", "NotificationService.Domain/"]
COPY ["SharedServices/SharedServices.csproj", "SharedServices/"]
RUN dotnet restore "./InventoryManagement.Web/InventoryManagement.Web.csproj"
COPY . .
WORKDIR "/src/InventoryManagement.Web"
RUN dotnet build "./InventoryManagement.Web.csproj" -c $BUILD_CONFIGURATION -o /app/build

# This stage is used to publish the service project to be copied to the final stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./InventoryManagement.Web.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# This stage is used in production or when running from VS in regular mode (Default when not using the Debug configuration)
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .

# The wwwroot folder should already be in /app/publish from the dotnet publish command
# But we're going to verify it's there by also explicitly ensuring the logo exists
# If the publish didn't include it (which would be unusual), this will catch it
COPY --from=build /src/InventoryManagement.Web/wwwroot/logo.jpg /app/wwwroot/logo.jpg

# Copy nginx configuration if needed
COPY --from=build /src/InventoryManagement.Web/nginx/ /app/nginx/

ENTRYPOINT ["dotnet", "InventoryManagement.Web.dll"]