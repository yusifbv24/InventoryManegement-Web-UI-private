@model TransferViewModel
@{
    ViewData["Title"] = "Transfer Product";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Transfer Product</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/Home/Dashboard">Dashboard</a></li>
        <li class="breadcrumb-item"><a asp-action="Index">Routes</a></li>
        <li class="breadcrumb-item active">Transfer</li>
    </ol>

    <div class="row">
        <div class="col-lg-8">
            <div class="card mb-4 shadow">
                <div class="card-header">
                    <i class="fas fa-exchange-alt me-1"></i>
                    Transfer Information
                </div>
                <div class="card-body">
                    <form asp-action="Transfer" method="post" enctype="multipart/form-data" id="transferForm">
                        @Html.AntiForgeryToken()
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        <!-- Inventory Code Search Section -->
                        <div class="mb-3">
                            <label class="form-label">Inventory Code <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-barcode"></i></span>
                                <input type="number" id="inventoryCodeInput" class="form-control form-control-lg"
                                       placeholder="Enter inventory code" min="1" max="9999"
                                       autocomplete="off" autofocus />
                                <button type="button" id="searchBtn" class="btn btn-primary">
                                    <i class="fas fa-search"></i> Search
                                </button>
                            </div>
                            <div id="searchFeedback" class="mt-2"></div>
                        </div>

                        <!-- Product Information Display -->
                        <div id="productInfoContainer" style="display:none;">
                            <div class="alert alert-info alert-permanent">
                                <h6 class="alert-heading"><i class="fas fa-box"></i> Product Information</h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <p class="mb-1"><strong>Model:</strong> <span id="productModel">N/A</span></p>
                                        <p class="mb-1"><strong>Vendor:</strong> <span id="productVendor">N/A</span></p>
                                        <p class="mb-1"><strong>Current Worker:</strong> <span id="currentWorker">N/A</span></p>
                                    </div>
                                    <div class="col-md-6">
                                        <p class="mb-1"><strong>Category:</strong> <span id="productCategory">N/A</span></p>
                                        <p class="mb-1"><strong>Current Department:</strong> <span id="currentDepartment">N/A</span></p>
                                        <p class="mb-1"><strong>Working Status:</strong> <span id="workingStatus">N/A</span></p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Warning Messages -->
                        <div id="warningContainer"></div>

                        <!-- Hidden Product ID -->
                        <input type="hidden" asp-for="ProductId" id="ProductId" />

                        <!-- Transfer Fields -->
                        <div id="transferFields" style="display:none;">
                            <hr class="my-4" />

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label asp-for="ToDepartmentId" class="form-label">
                                            <i class="fas fa-building"></i> To Department <span class="text-danger">*</span>
                                        </label>
                                        <select asp-for="ToDepartmentId" asp-items="Model.Departments" class="form-select" required>
                                            <option value="">-- Select Department --</option>
                                        </select>
                                        <span asp-validation-for="ToDepartmentId" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label asp-for="ToWorker" class="form-label">
                                            <i class="fas fa-user"></i> To Worker
                                        </label>
                                        <input asp-for="ToWorker" class="form-control" placeholder="Enter worker name (optional)" />
                                        <span asp-validation-for="ToWorker" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label asp-for="ImageFile" class="form-label">
                                    <i class="fas fa-camera"></i> Transfer Image (Optional)
                                </label>
                                <input asp-for="ImageFile" class="form-control" accept="image/*" />
                                <span asp-validation-for="ImageFile" class="text-danger"></span>
                                <div id="imagePreviewContainer" class="mt-2" style="display:none;">
                                    <img id="imagePreview" class="img-thumbnail" style="max-width: 200px;" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label asp-for="Notes" class="form-label">
                                    <i class="fas fa-sticky-note"></i> Notes
                                </label>
                                <textarea asp-for="Notes" class="form-control" rows="3" placeholder="Add any transfer notes..."></textarea>
                                <span asp-validation-for="Notes" class="text-danger"></span>
                            </div>

                            <div class="d-flex justify-content-between">
                                <a asp-action="Index" class="btn btn-secondary">
                                    <i class="fas fa-arrow-left"></i> Back to List
                                </a>
                                <button type="submit" class="btn btn-primary" id="submitBtn">
                                    <i class="fas fa-exchange-alt"></i> Transfer Product
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card mb-4 shadow">
                <div class="card-header">
                    <i class="fas fa-info-circle me-1"></i>
                    Transfer Guidelines
                </div>
                <div class="card-body">
                    <ul class="list-unstyled">
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i>
                            Enter inventory code and click Search or press Enter
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i>
                            System will verify product exists and show current location
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i>
                            Choose destination department
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i>
                            Assign to specific worker if needed
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i>
                            Add transfer image for documentation
                        </li>
                    </ul>

                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>Note:</strong> Products with pending transfers must have those completed first.
                    </div>

                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        <strong>Tip:</strong> The current worker information will be automatically displayed when you search for a product.
                    </div>
                </div>
            </div>

            <!-- Recent Transfers Card -->
            <div class="card shadow">
                <div class="card-header">
                    <i class="fas fa-history me-1"></i>
                    Recent Transfers
                </div>
                <div class="card-body">
                    <div id="recentTransfers">
                        <p class="text-muted">Loading recent transfers...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/ajaxHandler.js" asp-append-version="true"></script>
    <script src="~/js/app-config.js" asp-append-version="true"></script>
    <script>
        $(document).ready(function() {
            let currentProductData = null;
            let searchTimeout = null;
            let lastSearchedCode = '';

            // Initialize AjaxHandler for the form
            AjaxHandler.handleForm('#transferForm', {
                validateBeforeSubmit: true,
                successMessage: 'Product transferred successfully!',
                successRedirect: '/Routes',
                redirectDelay: 1500,
                onBeforeSubmit: function(form) {
                    // Validate that we have a product selected
                    if (!currentProductData || !$('#ProductId').val()) {
                        showError('Please search for and select a valid product first');
                        $('#inventoryCodeInput').focus();
                        return false;
                    }

                    // Validate department selection
                    if (!$('#ToDepartmentId').val()) {
                        showError('Please select a destination department');
                        $('#ToDepartmentId').focus();
                        return false;
                    }

                    return true;
                },
                onSuccess: function(response) {
                    // Handle approval request response
                    if (response.isApprovalRequest || response.approvalRequestId) {
                        showToast(response.message || 'Transfer request submitted for approval', 'info');
                        setTimeout(() => window.location.href = '/Routes', 2000);
                        return false; // Prevent default success handling
                    }
                    return true; // Continue with default success handling
                },
                onError: function(errorMessage, xhr) {
                    showError(errorMessage);
                    console.error('Transfer error:', errorMessage);
                }
            });

            // Focus on inventory code input
            $('#inventoryCodeInput').focus();

            // Handle Enter key in inventory code input
            $('#inventoryCodeInput').on('keypress', function(e) {
                if (e.which === 13) {
                    e.preventDefault();
                    searchProduct();
                }
            });

            // Auto-search on input with debouncing
            $('#inventoryCodeInput').on('input', function() {
                const inventoryCode = $(this).val().trim();

                // Clear timeout if exists
                if (searchTimeout) {
                    clearTimeout(searchTimeout);
                }

                // Reset if empty
                if (!inventoryCode) {
                    resetForm();
                    return;
                }

                // Validate range
                const codeNum = parseInt(inventoryCode);
                if (isNaN(codeNum) || codeNum < 1 || codeNum > 9999) {
                    showError('Inventory code must be between 1 and 9999');
                    return;
                }

                // Set timeout for auto-search (750ms delay)
                searchTimeout = setTimeout(() => {
                    searchProduct();
                }, 750);
            });

            // Search button click
            $('#searchBtn').on('click', function() {
                searchProduct();
            });

            // Image preview
            $('#ImageFile').on('change', function() {
                if (this.files && this.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        $('#imagePreview').attr('src', e.target.result);
                        $('#imagePreviewContainer').show();
                    };
                    reader.readAsDataURL(this.files[0]);
                } else {
                    $('#imagePreviewContainer').hide();
                }
            });

            // Department change handler
            $('#ToDepartmentId').on('change', function() {
                if (currentProductData && $(this).val() === currentProductData.departmentId?.toString()) {
                    showWarning('You are transferring to the same department the product is currently in.');
                } else {
                    hideWarning();
                }
            });

            // Search product function
            async function searchProduct() {
                const inventoryCode = $('#inventoryCodeInput').val().trim();

                if (!inventoryCode) {
                    showError('Please enter an inventory code');
                    return;
                }

                // Avoid duplicate searches
                if (inventoryCode === lastSearchedCode && currentProductData) {
                    return;
                }

                showSearching();
                hideError();
                hideWarning();

                try {
                    const apiUrl = AppConfig.buildApiUrl(`products/search/inventory-code/${inventoryCode}`);

                    const token = await SecureTokenProvider.getToken();

                    const response = await $.ajax({
                        url: apiUrl,
                        type: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (response && response.id) {
                        lastSearchedCode = inventoryCode;
                        currentProductData = response;
                        displayProductInfo(response);
                        await checkPendingRoutes(response.id);
                    } else {
                        throw new Error('Product not found');
                    }
                } catch (error) {
                    console.error('Search error:', error);
                    currentProductData = null;
                    lastSearchedCode = '';

                    if (error.status === 404) {
                        showError(`No product found with inventory code: ${inventoryCode}`);
                    } else if (error.status === 401) {
                        showError('Your session has expired. Please refresh the page or login again.');
                    } else {
                        showError(error.responseJSON?.error || error.responseJSON?.message || 'Error searching for product');
                    }

                    hideProductInfo();
                    hideTransferFields();
                } finally {
                    hideSearching();
                }
            }

            // Display product information
            function displayProductInfo(product) {
                $('#productModel').text(product.model || 'N/A');
                $('#productVendor').text(product.vendor || 'N/A');
                $('#currentWorker').text(product.worker || 'No worker assigned');
                $('#productCategory').text(product.categoryName || 'N/A');
                $('#currentDepartment').text(product.departmentName || 'N/A');
                $('#workingStatus').html(product.isWorking ?
                    '<span class="badge bg-success">Working</span>' :
                    '<span class="badge bg-danger">Not Working</span>');

                $('#ProductId').val(product.id);
                $('#productInfoContainer').slideDown();

                showSuccess(`Product found: ${product.model} - Currently with ${product.worker || 'no worker'}`);
            }

            // Check for pending routes
            async function checkPendingRoutes(productId) {
                try {
                    const apiUrl = AppConfig.buildApiUrl(`inventoryroutes/product/${productId}`);

                    const token = await SecureTokenProvider.getToken();

                    const routes = await $.ajax({
                        url: apiUrl,
                        type: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    const pendingRoutes = (routes || []).filter(r => !r.isCompleted);

                    if (pendingRoutes.length > 0) {
                        const lastPending = pendingRoutes[0];
                        showWarning(`This product has a pending transfer to ${lastPending.toDepartmentName}
                                    created on ${new Date(lastPending.createdAt).toLocaleDateString()}.
                                    The pending transfer must be completed first.`, true);
                        hideTransferFields();
                    } else {
                        showTransferFields();
                    }
                } catch (error) {
                    console.error('Failed to check pending routes:', error);
                    // Show transfer fields anyway if check fails
                    showTransferFields();
                }
            }

            // Load recent transfers
            async function loadRecentTransfers() {
                try {
                    const apiUrl = AppConfig.buildApiUrl('inventoryroutes?pageSize=5&pageNumber=1');

                    const token =await SecureTokenProvider.getToken();

                    const response = await $.ajax({
                        url: apiUrl,
                        type: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (response && response.items && response.items.length > 0) {
                        let html = '<ul class="list-unstyled mb-0">';
                        response.items.forEach(route => {
                            const statusBadge = route.isCompleted ?
                                '<span class="badge bg-success">Completed</span>' :
                                '<span class="badge bg-warning">Pending</span>';

                            html += `
                                <li class="mb-2 pb-2 border-bottom">
                                    <div class="d-flex justify-content-between">
                                        <small><strong>${route.inventoryCode}</strong> - ${route.model || 'N/A'}</small>
                                        ${statusBadge}
                                    </div>
                                    <small class="text-muted">
                                        To: ${route.toDepartmentName}
                                        ${route.toWorker ? `(${route.toWorker})` : ''}
                                    </small>
                                </li>
                            `;
                        });
                        html += '</ul>';
                        $('#recentTransfers').html(html);
                    } else {
                        $('#recentTransfers').html('<p class="text-muted">No recent transfers</p>');
                    }
                } catch (error) {
                    console.error('Failed to load recent transfers:', error);
                    $('#recentTransfers').html('<p class="text-muted">Unable to load recent transfers</p>');
                }
            }

            // UI Helper Functions
            function showTransferFields() {
                $('#transferFields').slideDown();
                $('#submitBtn').prop('disabled', false);
            }

            function hideTransferFields() {
                $('#transferFields').slideUp();
                $('#submitBtn').prop('disabled', true);
            }

            function hideProductInfo() {
                $('#productInfoContainer').slideUp();
                $('#ProductId').val('');
                currentProductData = null;
            }

            function showSearching() {
                $('#searchBtn').html('<span class="spinner-border spinner-border-sm me-1"></span> Searching...')
                    .prop('disabled', true);
                $('#searchFeedback').html('<span class="text-info"><i class="fas fa-search"></i> Searching...</span>');
            }

            function hideSearching() {
                $('#searchBtn').html('<i class="fas fa-search"></i> Search')
                    .prop('disabled', false);
            }

            function showError(message) {
                $('#searchFeedback').html(`<span class="text-danger"><i class="fas fa-times-circle"></i> ${message}</span>`);
                $('#warningContainer').html('');
            }

            function hideError() {
                $('#searchFeedback').html('');
            }

            function showSuccess(message) {
                $('#searchFeedback').html(`<span class="text-success"><i class="fas fa-check-circle"></i> ${message}</span>`);
            }

            function showWarning(message, isBlocking = false) {
                const alertClass = isBlocking ? 'alert-danger' : 'alert-warning';
                const icon = isBlocking ? 'fa-ban' : 'fa-exclamation-triangle';

                $('#warningContainer').html(`
                    <div class="alert ${alertClass} mt-3">
                        <i class="fas ${icon}"></i>
                        <strong>${isBlocking ? 'Blocked' : 'Warning'}:</strong> ${message}
                    </div>
                `);
            }

            function hideWarning() {
                $('#warningContainer').html('');
            }

            function resetForm() {
                hideProductInfo();
                hideTransferFields();
                hideError();
                hideWarning();
                currentProductData = null;
                lastSearchedCode = '';
                $('#ProductId').val('');
                $('#ToDepartmentId').val('');
                $('#ToWorker').val('');
                $('#Notes').val('');
                $('#imagePreviewContainer').hide();
            }

            // Load recent transfers on page load
            loadRecentTransfers();

            // Refresh recent transfers every 30 seconds
            setInterval(loadRecentTransfers, 30000);
        });
    </script>
}

<style>
    #inventoryCodeInput {
        font-size: 1.25rem;
        font-weight: 500;
    }

    #searchFeedback {
        font-size: 0.9rem;
        min-height: 20px;
    }

    .alert-heading {
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
    }

    #transferFields, #productInfoContainer {
        animation: slideDown 0.3s ease-out;
    }

    @@keyframes slideDown {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .list-unstyled li:last-child {
        border-bottom: none !important;
    }

    #imagePreview {
        cursor: pointer;
    }

    .badge {
        font-size: 0.75rem;
    }
</style>