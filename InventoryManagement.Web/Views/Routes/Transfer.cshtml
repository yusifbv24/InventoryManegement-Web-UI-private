@model TransferViewModel
@{
    ViewData["Title"] = "Transfer Product";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Transfer Product</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/Home/Dashboard">Dashboard</a></li>
        <li class="breadcrumb-item"><a asp-action="Index">Routes</a></li>
        <li class="breadcrumb-item active">Transfer</li>
    </ol>

    <div class="row">
        <div class="col-lg-8">
            <div class="card mb-4 shadow">
                <div class="card-header">
                    <i class="fas fa-exchange-alt me-1"></i>
                    Transfer Information
                </div>
                <div class="card-body">
                    <form asp-action="Transfer" method="post" enctype="multipart/form-data" id="transferForm">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        <div class="mb-3">
                            <label class="form-label">Inventory Code <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-barcode"></i></span>
                                <input type="number" id="inventoryCodeInput" class="form-control form-control-lg"
                                       placeholder="Enter inventory code" min="1" max="9999"
                                       autocomplete="off" autofocus />
                                <div class="input-group-append">
                                    <span class="input-group-text" id="searchSpinner" style="display:none;">
                                        <span class="spinner-border spinner-border-sm"></span>
                                    </span>
                                </div>
                            </div>
                            <div id="searchFeedback" class="mt-2"></div>
                        </div>

                        <div id="productInfo" class="alert alert-info alert-permanent" style="display:none;">
                            <h6 class="alert-heading"><i class="fas fa-box"></i> Product Information</h6>
                            <div class="row">
                                <div class="col-md-6">
                                    <p class="mb-1"><strong>Model:</strong> <span id="productModel"></span></p>
                                    <p class="mb-1"><strong>Vendor:</strong> <span id="productVendor"></span></p>
                                </div>
                                <div class="col-md-6">
                                    <p class="mb-1"><strong>Category:</strong> <span id="productCategory"></span></p>
                                    <p class="mb-1"><strong>Department:</strong> <span id="productDepartment"></span></p>
                                </div>
                            </div>
                        </div>

                        <div id="errorInfo" class="alert alert-danger" style="display:none;">
                            <i class="fas fa-exclamation-circle"></i> <span id="errorMessage"></span>
                        </div>

                        <input type="hidden" asp-for="ProductId" id="productId" />

                        <div id="transferFields" style="display:none;">
                            <hr class="my-4" />

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label asp-for="ToDepartmentId" class="form-label">
                                            <i class="fas fa-building"></i> To Department <span class="text-danger">*</span>
                                        </label>
                                        <select asp-for="ToDepartmentId" asp-items="Model.Departments" class="form-select">
                                            <option value="">-- Select Department --</option>
                                        </select>
                                        <span asp-validation-for="ToDepartmentId" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label asp-for="ToWorker" class="form-label">
                                            <i class="fas fa-user"></i> To Worker
                                        </label>
                                        <input asp-for="ToWorker" class="form-control" placeholder="Enter worker name (optional)" />
                                        <span asp-validation-for="ToWorker" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label asp-for="ImageFile" class="form-label">
                                    <i class="fas fa-camera"></i> Transfer Image (Optional)
                                </label>
                                <input asp-for="ImageFile" class="form-control" accept="image/*" onchange="previewImage(this, 'imagePreview')" />
                                <span asp-validation-for="ImageFile" class="text-danger"></span>
                                <img id="imagePreview" class="img-thumbnail mt-2" style="max-width: 200px; display: none;" />
                            </div>

                            <div class="mb-3">
                                <label asp-for="Notes" class="form-label">
                                    <i class="fas fa-sticky-note"></i> Notes
                                </label>
                                <textarea asp-for="Notes" class="form-control" rows="3" placeholder="Add any transfer notes..."></textarea>
                                <span asp-validation-for="Notes" class="text-danger"></span>
                            </div>

                            <div class="d-flex justify-content-between">
                                <a asp-action="Index" class="btn btn-secondary">
                                    <i class="fas fa-arrow-left"></i> Back to List
                                </a>
                                <button type="submit" class="btn btn-primary" id="submitBtn">
                                    <i class="fas fa-exchange-alt"></i> Transfer Product
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card mb-4 shadow">
                <div class="card-header">
                    <i class="fas fa-info-circle me-1"></i>
                    Transfer Guidelines
                </div>
                <div class="card-body">
                    <ul class="list-unstyled">
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i>
                            Type inventory code to auto-search
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i>
                            System will verify product exists
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i>
                            Choose destination department
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i>
                            Assign to specific worker if needed
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i>
                            Add transfer image for documentation
                        </li>
                    </ul>

                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>Note:</strong> Transfer cannot proceed without a valid inventory code.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/app-config.js" asp-append-version="true"></script>
    <script>
        // Declare variables in higher scope
        let searchTimeout;
        let currentProductId = null; // Added missing variable

        $(document).ready(function() {
            // Focus on inventory code input
            $('#inventoryCodeInput').focus();

            // Auto-search on input
            $('#inventoryCodeInput').on('input', function() {
                const inventoryCode = $(this).val().trim();

                // Clear any existing timeout
                clearTimeout(searchTimeout);

                // Reset if empty
                if (!inventoryCode) {
                    resetForm();
                    return;
                }

                // Validate inventory code range
                const codeNum = parseInt(inventoryCode);
                if (isNaN(codeNum) || codeNum < 1 || codeNum > 9999) {
                    showError('Inventory code must be between 1 and 9999');
                    hideProductInfo();
                    hideTransferFields();
                    $('.route-warning').remove();
                    return;
                }

                // Show searching indicator
                showSearching();

                // Set timeout for auto-search (500ms delay)
                searchTimeout = setTimeout(() => {
                    searchProduct(inventoryCode);
                }, 500);
            });

            // Fixed form submission handler
                $('#transferForm').on('submit', function(e) {
        e.preventDefault();

        if (!currentProductId) {
            showError('Please enter a valid inventory code first');
            $('#inventoryCodeInput').focus();
            return false;
        }

        const form = this;
        const $submitBtn = $('#submitBtn');
        const originalBtnHtml = $submitBtn.html();
        const originalBtnDisabled = $submitBtn.prop('disabled');

         // Store original state
        $submitBtn.data('original-html', originalBtnHtml);
        $submitBtn.data('original-disabled', originalBtnDisabled);


        // Function to reset button
            const resetButton = () => {
                $submitBtn.prop('disabled', $submitBtn.data('original-disabled') || false)
                          .html($submitBtn.data('original-html') || 'Transfer Product');
            };

        // Disable submit button
        $submitBtn.prop('disabled', true)
            .html('<span class="spinner-border spinner-border-sm me-2"></span>Processing...');

        const formData = new FormData(form);

        $.ajax({
            url: form.action,
            type: form.method,
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                resetButton(); // Always reset button first

                if (response.approvalRequestId || response.status === 'PendingApproval') {
                    showToast(
                        response.message || 'Transfer request submitted for approval',
                        'info'
                    );
                    setTimeout(() => window.location.href = '/Routes', 2000);
                }
                else if (response.isSuccess !== false) {
                showToast('Product transferred successfully!', 'success');
                setTimeout(() => window.location.href = '/Routes', 1500);
                }
                else {
                    showError(response.message || 'Transfer failed');
                }
            },
            error: function(xhr) {
                resetButton(); // Always reset button on error

                let errorMessage = 'Error processing transfer';
                try {
                    if (xhr.responseJSON) {
                        errorMessage = xhr.responseJSON.message ||
                                      xhr.responseJSON.error ||
                                      xhr.responseJSON.title ||
                                      errorMessage;
                    }
                    else if (xhr.responseText && xhr.responseText.length < 500) {
                        errorMessage = xhr.responseText;
                    }}
                    catch (e) {
                    console.error('Error parsing error response:', e);
                    }
                    showError(errorMessage);
                    },
                complete: function() {
                // Failsafe: Always reset button after 5 seconds
                setTimeout(resetButton, 5000);
                }});
            });


         const savedState = sessionStorage.getItem('transferFormState');
            if (savedState) {
                try {
                    const formState = JSON.parse(savedState);
                    $('#inventoryCodeInput').val(formState.inventoryCode);
                    $('#ToDepartmentId').val(formState.toDepartmentId);
                    $('#ToWorker').val(formState.toWorker);
                    $('#Notes').val(formState.notes);

                    // Clear the saved state
                    sessionStorage.removeItem('transferFormState');

                    // Trigger search if inventory code was saved
                    if (formState.inventoryCode) {
                        $('#inventoryCodeInput').trigger('input');
                    }
                } 
                catch (e) {
                    console.error('Error restoring form state:', e);
                }
            }
        });

        async function searchProduct(inventoryCode) {
            $('.route-warning').remove();

            try {
                // Get a valid token (will auto-refresh if needed)
                const token = await AppConfig.tokenManagement.getValidToken();
                const apiUrl = AppConfig.buildApiUrl(`products/search/inventory-code/${inventoryCode}`);

                const response = await $.ajax({
                    url: apiUrl,
                    type: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + token
                    }
                });

                hideSearching();

                if (response && response.id) {
                    currentProductId = response.id;
                    displayProductInfo(response);
                    $('#productId').val(response.id);
                    await checkPendingRoutes(response.id);
                } else {
                    currentProductId = null;
                    showError('No product found with inventory code: ' + inventoryCode);
                    hideProductInfo();
                    hideTransferFields();
                }
            } 
            catch (error) {
                hideSearching();
                currentProductId = null;

                if (error.status === 401) {
                    // Try to refresh token once more
                    try {
                        console.log('Attempting token refresh after 401 error');
                        const newToken = await AppConfig.tokenManagement.refreshToken();

                        // Retry the search with new token
                        return searchProduct(inventoryCode);
                    } catch (refreshError) {
                        showError('Your session has expired. Please log in again.');
                        setTimeout(() => window.location.href = '/Account/Login', 3000);
                    }
                } else if (error.status === 404) {
                    showError(`Product not found with code: ${inventoryCode}`);
                } else {
                    showError('Error searching for product: ' + (error.responseJSON?.message || error.statusText));
                }

                hideProductInfo();
                hideTransferFields();
            }
        }

        async function checkPendingRoutes(productId) {
            $('.route-warning').remove();

            try {
                const token = await AppConfig.tokenManagement.getValidToken();
                const apiUrl = AppConfig.buildApiUrl(`inventoryroutes/product/${productId}`);

                const routes = await $.ajax({
                    url: apiUrl,
                    type: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + token
                    }
                });

                const pendingRoutes = routes.filter(r => !r.isCompleted);

                if (pendingRoutes.length > 0) {
                    const lastPending = pendingRoutes[0];
                    const warningHtml = `
                        <div class="alert alert-warning mt-3 route-warning">
                            <i class="fas fa-exclamation-triangle"></i>
                            <strong>Warning:</strong> This product has a pending transfer to ${lastPending.toDepartmentName}
                            created on ${new Date(lastPending.createdAt).toLocaleDateString()}.
                            <br>
                            <small>The pending transfer must be completed or cancelled before creating a new one.</small>
                        </div>
                    `;
                    $('#productInfo').after(warningHtml);
                    hideTransferFields();
                } else {
                    showTransferFields();
                    hideError();
                }
            } 
            catch (error) {
                console.error('Failed to check pending routes:', error);
                // Continue anyway if check fails
                showTransferFields();
            }
        }

        function displayProductInfo(product) {
            $('#productModel').text(product.model || 'N/A');
            $('#productVendor').text(product.vendor || 'N/A');
            $('#productCategory').text(product.categoryName || 'N/A');
            $('#productDepartment').text(product.departmentName || 'N/A');

           // Add worker/employee information display
    if (product.worker) {
        // Add a new field to show the current worker
        if ($('#currentWorker').length === 0) {
                    $('#productDepartment').after(`
                            <span id="currentWorker"></span>
            `);
        }
        $('#currentWorker').text(' - ' + product.worker);
    }

    $('#productInfo').slideDown();
    $('#searchFeedback').html('<span class="text-success"><i class="fas fa-check-circle"></i> Product found!</span>');
}

        function showTransferFields() {
            $('#transferFields').slideDown();
            $('#submitBtn').prop('disabled', false);
        }

        function hideTransferFields() {
            $('#transferFields').slideUp();
            $('#submitBtn').prop('disabled', true);
            $('#productId').val('');
        }

        function hideProductInfo() {
            $('#productInfo').slideUp();
        }

        function showError(message) {
            $('#errorMessage').text(message);
            $('#errorInfo').slideDown();
            $('#searchFeedback').html('<span class="text-danger"><i class="fas fa-times-circle"></i> ' + message + '</span>');
        }

        function hideError() {
            $('#errorInfo').slideUp();
            $('#searchFeedback').empty();
        }

        function showSearching() {
            $('#searchSpinner').show();
            $('#searchFeedback').html('<span class="text-info"><i class="fas fa-search"></i> Searching...</span>');
        }

        function hideSearching() {
            $('#searchSpinner').hide();
        }

        function resetForm() {
            hideProductInfo();
            hideTransferFields();
            hideError();
            $('#searchFeedback').empty();
            $('.route-warning').remove(); // Remove any warnings
            currentProductId=null;
            $('#productId').val('');
        }

        function previewImage(input, previewId) {
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    $('#' + previewId).attr('src', e.target.result).show();
                };
                reader.readAsDataURL(input.files[0]);
            }
        }
    </script>
}

<style>
    #inventoryCodeInput {
        font-size: 1.25rem;
        font-weight: 500;
    }

    #searchFeedback {
        font-size: 0.9rem;
    }

    .alert-heading {
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
    }

    #transferFields {
        animation: slideDown 0.3s ease-out;
    }

    @@keyframes slideDown {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>