@model RouteViewModel
@{
    ViewData["Title"] = "Edit Route";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Edit Route</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/Home/Dashboard">Dashboard</a></li>
        <li class="breadcrumb-item"><a asp-action="Index">Routes</a></li>
        <li class="breadcrumb-item active">Edit</li>
    </ol>

    <div class="row">
        <div class="col-lg-8">
            <div class="card mb-4 shadow">
                <div class="card-header">
                    <i class="fas fa-edit me-1"></i>
                    Edit Route Information
                </div>
                <div class="card-body">
                    <!-- Route Details Display -->
                    <div class="alert alert-info mb-4">
                        <h6 class="alert-heading">Route Information</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <p class="mb-1"><strong>Route Type:</strong> @Model.RouteTypeName</p>
                                <p class="mb-1"><strong>Product:</strong> @Model.InventoryCode - @Model.Model</p>
                                <p class="mb-1"><strong>Vendor:</strong> @Model.Vendor</p>
                            </div>
                            <div class="col-md-6">
                                <p class="mb-1"><strong>From:</strong> @Model.FromDepartmentName (@Model.FromWorker)</p>
                                <p class="mb-1"><strong>Created:</strong> @Model.CreatedAt.ToString("MM/dd/yyyy HH:mm")</p>
                                <p class="mb-1">
                                    <strong>Status:</strong>
                                    @if (Model.IsCompleted)
                                    {
                                        <span class="badge bg-success">Completed</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning">Pending</span>
                                    }
                                </p>
                            </div>
                        </div>
                    </div>

                    <form asp-action="Edit" method="post" enctype="multipart/form-data" id="editRouteForm">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">To Department</label>
                                    <input type="text" class="form-control" value="@Model.ToDepartmentName" readonly disabled />
                                    <input type="hidden" name="ToDepartmentId" value="@Model.ToDepartmentId" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">To Worker</label>
                                    <input type="text" class="form-control" value="@Model.ToWorker"/>
                                    <input type="hidden" name="ToWorker" value="@Model.ToWorker" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Route Image</label>
                            @if (!string.IsNullOrEmpty(Model.ImageUrl))
                            {
                                <div id="currentImageContainer" class="mb-3">
                                    <div class="position-relative d-inline-block">
                                        <img src="@Model.FullImageUrl" class="img-thumbnail" style="max-width: 200px;" alt="Route Image" />
                                        <button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0"
                                                onclick="removeCurrentImage()" title="Remove image">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                    <input type="hidden" id="RemoveImage" name="RemoveImage" value="false" />
                                </div>
                            }
                            else
                            {
                                <p class="text-muted">No image uploaded</p>
                            }

                            <div id="newImageUpload" style="@(!string.IsNullOrEmpty(Model.ImageUrl) ? "display:none;" : "")">
                                <label class="form-label">Upload New Image</label>
                                <input type="file" name="ImageFile" class="form-control" accept="image/*"
                                       onchange="previewImage(this, 'imagePreview')" />
                                <img id="imagePreview" class="img-thumbnail mt-2" style="max-width: 200px; display: none;" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Notes</label>
                            <textarea name="Notes" class="form-control" rows="3" placeholder="Add any notes...">@Model.Notes</textarea>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a asp-action="Index" class="btn btn-secondary">
                                <i class="fas fa-arrow-left"></i> Back to List
                            </a>
                            <div>
                                @if (!Model.IsCompleted)
                                {
                                    <button type="button" class="btn btn-danger me-2" onclick="confirmDelete(@Model.Id)">
                                        <i class="fas fa-trash"></i> Delete Route
                                    </button>
                                }
                                <button type="submit" class="btn btn-primary" id="submitBtn">
                                    <i class="fas fa-save"></i> Save Changes
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card mb-4 shadow">
                <div class="card-header">
                    <i class="fas fa-info-circle me-1"></i>
                    Edit Guidelines
                </div>
                <div class="card-body">
                    <ul class="list-unstyled">
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i>
                            Changing department will update product location
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i>
                            Worker assignment tracks responsibility
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-check text-success"></i>
                            Upload new image to replace existing one
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-exclamation-triangle text-warning"></i>
                            Completed routes cannot be edited
                        </li>
                    </ul>

                    @if (!Model.IsCompleted)
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle"></i>
                            <strong>Note:</strong> Deleting this route will revert the product to its previous location.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this route?</p>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> The product will be reverted to its previous location and worker assignment.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="deleteRoute()">
                    <i class="fas fa-trash"></i> Delete Route
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/ajaxHandler.js" asp-append-version="true"></script>
    <script>
        // Create a namespace for this page to avoid global conflicts
        (function() {
            'use strict';

            // Track if form is currently being submitted
            let isSubmitting = false;
            let routeId = @Model.Id;  // Store the route ID for use in delete function

            // Initialize the form handler when document is ready
            $(document).ready(function() {
                initializeEditForm();
                initializeImageHandlers();
                initializeDeleteHandlers();
            });

            // Function to initialize the edit form with proper safeguards
            function initializeEditForm() {
                const $form = $('#editRouteForm');

                // Ensure the form exists before proceeding
                if (!$form.length) {
                    console.error('Edit form not found');
                    return;
                }

                // Get the submit button and remember its original appearance
                const $submitBtn = $('#submitBtn');
                const originalButtonHtml = $submitBtn.html();

                // This is crucial to prevent duplicate handlers
                $form.off('submit');
                $form.off('submit.ajaxHandler');
                $submitBtn.off('click');

                // Initialize the AjaxHandler with proper configuration
                AjaxHandler.handleForm('#editRouteForm', {
                    successMessage: 'Route updated successfully!',
                    successRedirect: '/Routes',
                    redirectDelay: 2000,

                    onBeforeSubmit: function(form) {
                        // Check if already submitting
                        if (isSubmitting) {
                            console.log('Blocking duplicate submission attempt');
                            return false;
                        }

                        // Set the submission flag
                        isSubmitting = true;

                        // Log for debugging
                        console.log('Starting route update submission');

                        return true; // Allow submission to proceed
                    },

                    onSuccess: function(response) {
                        console.log('Route update response received:', response);

                        // Check if this is an approval request
                        if (response.isApprovalRequest ||
                            response.status === 'PendingApproval' ||
                            response.approvalRequestId) {

                            showToast(
                                response.message || 'Update submitted for approval',
                                'info'
                            );

                            // Redirect after showing the message
                            setTimeout(() => {
                                window.location.href = '/Routes';
                            }, 2000);

                            return false; // Prevent default redirect
                        }

                        // For direct updates (admin users)
                        showToast('Route updated successfully!', 'success');
                        setTimeout(() => {
                            window.location.href = '/Routes';
                        }, 1500);

                        return false; // We're handling the redirect ourselves
                    },

                    onError: function(errorMessage, response) {
                        console.error('Route update error:', errorMessage, response);

                        // Reset submission flag on error
                        isSubmitting = false;

                        // Also restore the button to its original state
                        $submitBtn.prop('disabled', false)
                            .html(originalButtonHtml);

                        // Show error message
                        showToast(errorMessage || 'Failed to update route', 'error');
                    }
                });
            }

            // Function to handle image preview and removal
            function initializeImageHandlers() {
                // Image preview function
                window.previewImage = function(input, previewId) {
                    if (input.files && input.files[0]) {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            $('#' + previewId).attr('src', e.target.result).show();
                        };
                        reader.readAsDataURL(input.files[0]);
                    }
                };

                // Remove current image function
                window.removeCurrentImage = function() {
                    $('#currentImageContainer').hide();
                    $('#RemoveImage').val('true');
                    $('#newImageUpload').show();
                };
            }

            // Function to handle delete operations
            function initializeDeleteHandlers() {
                // Confirm delete function
                window.confirmDelete = function(id) {
                    // Store the route ID for use in deleteRoute
                    window.currentDeleteRouteId = id;
                    $('#deleteModal').modal('show');
                };

                // Delete route function
                window.deleteRoute = function() {
                    // Prevent multiple delete attempts
                    if (isSubmitting) {
                        console.log('Already processing a request');
                        return;
                    }

                    isSubmitting = true;
                    $('#deleteModal').modal('hide');

                    const deleteRouteId = window.currentDeleteRouteId || routeId;

                    $.ajax({
                        url: '/Routes/Delete',
                        type: 'POST',
                        data: {
                            id: deleteRouteId,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            showToast(
                                'Route deleted successfully. Product has been reverted to previous state.',
                                'success'
                            );
                            setTimeout(() => {
                                window.location.href = '/Routes';
                            }, 2000);
                        },
                        error: function(xhr) {
                            isSubmitting = false;

                            let errorMsg = 'Failed to delete route';
                            try {
                                if (xhr.responseJSON && xhr.responseJSON.error) {
                                    errorMsg = xhr.responseJSON.error;
                                } else if (xhr.responseText) {
                                    const response = JSON.parse(xhr.responseText);
                                    errorMsg = response.message || response.error || errorMsg;
                                }
                            } catch (e) {
                                console.error('Error parsing error response:', e);
                            }

                            showToast(errorMsg, 'error');
                        }
                    });
                };

                // Ensure delete modal doesn't interfere with form submission
                $('#deleteModal').on('hidden.bs.modal', function() {
                    // Clear any stored route ID
                    window.currentDeleteRouteId = null;
                });
            }
        })(); // End of page-specific namespace
    </script>
}