@model ApprovalDashboardViewModel

<div class="container-fluid px-4">
    <h1 class="mt-4">Approval Requests</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/Home/Dashboard">Dashboard</a></li>
        <li class="breadcrumb-item active">Approvals</li>
    </ol>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6">
            <div class="card bg-warning text-white mb-4">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-uppercase mb-1">Pending</div>
                            <div class="h5 mb-0">@Model.TotalPending</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-clock fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-success text-white mb-4">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-uppercase mb-1">Approved Today</div>
                            <div class="h5 mb-0">@Model.TotalApproved</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-danger text-white mb-4">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-uppercase mb-1">Rejected Today</div>
                            <div class="h5 mb-0">@Model.TotalRejected</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-times fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Pending Requests Table -->
    <div class="card mb-4 shadow">
        <div class="card-header">
            <i class="fas fa-clock me-1"></i>
            Pending Approval Requests
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-hover" id="approvalsTable">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Type</th>
                            <th>Entity</th>
                            <th>Requested By</th>
                            <th style="width:20% ">Summary</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var request in Model.PendingRequests)
                        {
                            <tr data-request-id="@request.Id">
                                <td data-order="@request.CreatedAt.Ticks">
                                    @request.CreatedAt.ToString("MM/dd/yyyy HH:mm")
                                </td>
                                <td>
                                    <span class="badge bg-info">
                                        @GetRequestTypeDisplay(request.RequestType)
                                    </span>
                                </td>
                                <td>
                                    @request.EntityType
                                    @if (request.EntityId.HasValue)
                                    {
                                        <span class="badge bg-secondary">#@request.EntityId</span>
                                    }
                                </td>
                                <td>@request.RequestedByName</td>
                                <td class="request-summary" data-action-data="@request.ActionData">
                                    <span class="text-muted">Loading...</span>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-info" onclick="viewDetails(@request.Id)">
                                            <i class="fas fa-eye"></i> Details
                                        </button>
                                        <button class="btn btn-sm btn-success" onclick="quickApprove(@request.Id)">
                                            <i class="fas fa-check"></i> Approve
                                        </button>
                                        <button class="btn btn-sm btn-danger" onclick="showRejectModal(@request.Id)">
                                            <i class="fas fa-times"></i> Reject
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Request Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="detailsContent">
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success" id="modalApproveBtn" style="display:none;">
                    <i class="fas fa-check"></i> Approve
                </button>
                <button type="button" class="btn btn-danger" id="modalRejectBtn" style="display:none;">
                    <i class="fas fa-times"></i> Reject
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Reject Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Rejection Reason <span class="text-danger">*</span></label>
                    <textarea id="rejectionReason" class="form-control" rows="3" required
                              placeholder="Please provide a reason for rejection..."></textarea>
                    <div class="invalid-feedback">
                        Rejection reason is required.
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmReject()">
                    <i class="fas fa-times"></i> Reject
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentRequestId = null;

        $(document).ready(function() {
            $('#approvalsTable').DataTable({
                order: [[0, 'desc']],
                pageLength: 25
            });

            // Parse and display summaries
            $('.request-summary').each(function() {
                const $this = $(this);
                const actionData = $this.data('action-data');
                const requestType = $this.closest('tr').find('.badge').first().text().trim();

                try {
                    const summary = getRequestSummary(requestType, actionData);
                    $this.html(summary);
                } catch (e) {
                    $this.html('<span class="text-danger">Error parsing data</span>');
                }
            });
        });

        function getRequestSummary(requestType, actionData) {
            try {
                const data = typeof actionData === 'string' ? JSON.parse(actionData) : actionData;

                switch(requestType) {
                    case 'Create Product':
                    case 'Creating Product':
                        const productData = data.ProductData || data;
                        const code = productData.inventoryCode || productData.InventoryCode || 'N/A';
                        const model = productData.model || productData.Model || 'N/A';
                        const vendor = productData.vendor || productData.Vendor || 'N/A';
                        const category = productData.categoryName || productData.CategoryName || `Category #${productData.categoryId || productData.CategoryId || 'N/A'}`;
                        return `New product: ${model} by ${vendor} (Code: ${code}, Category: ${category})`;

                    case 'Update Product':
                    case 'Updating Product':
                        return `Update product #${data.ProductId || data.productId || 'N/A'}`;

                    case 'Delete Product':
                    case 'Deleting Product':
                        return `Delete product #${data.ProductId || data.productId || 'N/A'}`;

                    case 'Transfer Product':
                    case 'Transferring Product':
                        const inventoryCode = data.inventoryCode || data.InventoryCode || 'N/A';
                        const toDeptName = data.toDepartmentName || data.ToDepartmentName || 'Unknown Department';
                        const toWorker = data.toWorker || data.ToWorker || '';
                        return `Transfer product (${inventoryCode}) to ${toDeptName}${toWorker ? ' - ' + toWorker : ''}`;

                    default:
                        return 'View details for more information';
                }
            } catch (e) {
                console.error('Error parsing action data:', e);
                return 'Error parsing request data';
            }
        }

                function viewDetails(requestId) {
            currentRequestId = requestId;
            $('#detailsContent').html('<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>');
            $('#modalApproveBtn, #modalRejectBtn').hide();
            $('#detailsModal').modal('show');

            $.get(`/Approvals/Details/${requestId}`, function(data) {
                $('#detailsContent').html(data);
                $('#modalApproveBtn, #modalRejectBtn').show()
                    .off('click')
                    .on('click', function() {
                        if ($(this).attr('id') === 'modalApproveBtn') {
                            quickApprove(requestId);
                        } else {
                            showRejectModal(requestId);
                        }
                        $('#detailsModal').modal('hide');
                    });
            }).fail(function(xhr, status, error) {
                console.error('Failed to load details:', error);
                $('#detailsContent').html('<div class="alert alert-danger">Failed to load details. Please try again.</div>');
            });
        }

        function quickApprove(requestId) {
            if (confirm('Are you sure you want to approve this request?')) {
                showLoader();

                $.post(`/Approvals/Approve/${requestId}`)
                    .done(function(response) {
                        hideLoader();
                        if (response.success) {
                            showToast('Request approved successfully', 'success');
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            showToast('Failed to approve request: ' + response.message, 'error');
                        }
                    })
                    .fail(function(xhr) {
                        hideLoader();
                        const errorMsg = xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
                        showToast('Failed to approve request: ' + errorMsg, 'error');
                    });
            }
        }

        function showRejectModal(requestId) {
            currentRequestId = requestId;
            $('#rejectionReason').val('').removeClass('is-invalid');
            $('#rejectModal').modal('show');
        }

        function confirmReject() {
            const reason = $('#rejectionReason').val().trim();

            if (!reason) {
                $('#rejectionReason').addClass('is-invalid');
                return;
            }

            showLoader();

            $.post(`/Approvals/Reject/${currentRequestId}`, { reason: reason })
                .done(function(response) {
                    hideLoader();
                    $('#rejectModal').modal('hide');
                    if (response.success) {
                        showToast('Request rejected', 'info');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showToast('Failed to reject request: ' + response.message, 'error');
                    }
                })
                .fail(function(xhr) {
                    hideLoader();
                    const errorMsg = xhr.responseJSON?.message || xhr.responseText || 'Unknown error';
                    showToast('Failed to reject request: ' + errorMsg, 'error');
                });
        }

        function showLoader() {
            $('body').append('<div class="loader-overlay"><div class="spinner-border text-primary" role="status"></div></div>');
        }

        function hideLoader() {
            $('.loader-overlay').remove();
        }
                function showToast(message, type = 'info') {
            // Create a simple toast notification
            const toast = $(`
                <div class="toast-notification alert alert-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'} alert-dismissible fade show"
                     style="position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `);

            $('body').append(toast);

            // Auto-remove after 5 seconds
            setTimeout(() => {
                toast.alert('close');
            }, 5000);
        }
    </script>
}

@functions {
    string GetRequestTypeDisplay(string requestType)
    {
        return requestType switch
        {
            "product.create" => "Create Product",
            "product.update" => "Update Product",
            "product.delete" => "Delete Product",
            "product.transfer" => "Transfer Product",
            "route.update" => "Update Route",
            "route.delete" => "Delete Route",
            _ => requestType
        };
    }
}