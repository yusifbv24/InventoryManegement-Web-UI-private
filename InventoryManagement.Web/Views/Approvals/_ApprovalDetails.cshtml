@model ApprovalRequestDto

<div class="approval-details">
    <div class="row">
        <div class="col-md-6">
            <h6>Request Information</h6>
            <table class="table table-sm">
                <tr>
                    <th>Type:</th>
                    <td>
                        <span class="badge bg-info">
                            @GetReadableRequestType(Model.RequestType)
                        </span>
                    </td>
                </tr>
                <tr>
                    <th>Entity:</th>
                    <td>@Model.EntityType @(Model.EntityId.HasValue ? $"#{Model.EntityId}" : "")</td>
                </tr>
                <tr>
                    <th>Requested By:</th>
                    <td>@Model.RequestedByName</td>
                </tr>
                <tr>
                    <th>Date:</th>
                    <td>@Model.CreatedAt.ToString("MM/dd/yyyy HH:mm")</td>
                </tr>
                <tr>
                    <th>Status:</th>
                    <td>
                        @if (Model.Status == "Pending")
                        {
                            <span class="badge bg-warning">Pending</span>
                        }
                        else if (Model.Status == "Executed" || Model.Status == "Approved")
                        {
                            <span class="badge bg-success">Approved</span>
                        }
                        else if (Model.Status == "Rejected")
                        {
                            <span class="badge bg-danger">Rejected</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">@Model.Status</span>
                        }
                    </td>
                </tr>
            </table>
        </div>
        <div class="col-md-6">
            <h6>Request Details</h6>
            <div class="bg-light p-3 rounded">
                @{
                    var details = ParseActionData(Model.RequestType, Model.ActionData);
                }
                @Html.Raw(details)
            </div>
        </div>
    </div>
</div>

@functions {
    string GetReadableRequestType(string requestType)
    {
        return requestType switch
        {
            "product.create" => "Creating Product",
            "product.update" => "Updating Product",
            "product.delete" => "Deleting Product",
            "product.transfer" => "Transferring Product",
            "route.update" => "Updating Route",
            "route.delete" => "Deleting Route",
            _ => requestType
        };
    }

    string ParseActionData(string requestType, string actionData)
    {
        try
        {
            var data = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(actionData);

            switch (requestType)
            {
                case "product.create":
                    return ParseProductCreateData(data);

                case "product.update":
                    return ParseProductUpdateData(data);

                case "product.delete":
                    return ParseProductDeleteData(data);

                case "product.transfer":
                    return ParseProductTransferData(data);

                case "route.update":
                    return ParseRouteUpdateData(data);

                case "route.delete":
                    return ParseRouteDeleteData(data);

                default:
                    // For unknown types, format the JSON nicely
                    return $"<pre class='mb-0' style='max-height: 400px; overflow-y: auto;'>{FormatJson(data)}</pre>";
            }
        }
        catch (Exception ex)
        {
            // If parsing fails, try to format the raw JSON
            try
            {
                var parsed = Newtonsoft.Json.Linq.JToken.Parse(actionData);
                return $"<pre class='mb-0' style='max-height: 400px; overflow-y: auto;'>{parsed.ToString(Newtonsoft.Json.Formatting.Indented)}</pre>";
            }
            catch
            {
                return $"<div class='text-danger'>Error parsing data: {ex.Message}</div>";
            }
        }
    }

    string ParseProductCreateData(dynamic data)
    {
        var productData = data.ProductData ?? data;
        var html = new System.Text.StringBuilder();

        // Basic Information
        html.AppendLine("<div class='mb-3'>");
        html.AppendLine("<h6 class='text-primary'>Product Information</h6>");
        html.AppendLine($"<strong>Inventory Code:</strong> {productData.inventoryCode ?? productData.InventoryCode}<br/>");
        html.AppendLine($"<strong>Model:</strong> {productData.model ?? productData.Model ?? "N/A"}<br/>");
        html.AppendLine($"<strong>Vendor:</strong> {productData.vendor ?? productData.Vendor ?? "N/A"}<br/>");
        html.AppendLine($"<strong>Worker:</strong> {productData.worker ?? productData.Worker ?? "Not assigned"}<br/>");
        html.AppendLine("</div>");

        // Category & Department
        html.AppendLine("<div class='mb-3'>");
        html.AppendLine("<h6 class='text-primary'>Location</h6>");
        var categoryName = productData.categoryName ?? productData.CategoryName ?? $"Category #{productData.categoryId ?? productData.CategoryId}";
        var departmentName = productData.departmentName ?? productData.DepartmentName ?? $"Department #{productData.departmentId ?? productData.DepartmentId}";
        html.AppendLine($"<strong>Category:</strong> {categoryName}<br/>");
        html.AppendLine($"<strong>Department:</strong> {departmentName}<br/>");
        html.AppendLine("</div>");

        // Status Information
        html.AppendLine("<div class='mb-3'>");
        html.AppendLine("<h6 class='text-primary'>Status</h6>");
        bool isWorking = GetBoolValue(productData, "isWorking", "IsWorking", true);
        bool isActive = GetBoolValue(productData, "isActive", "IsActive", true);
        bool isNewItem = GetBoolValue(productData, "isNewItem", "IsNewItem", true);

        html.AppendLine($"<strong>Working Status:</strong> {(isWorking ? "<span class='badge bg-success'>Working</span>" : "<span class='badge bg-danger'>Not Working</span>")}<br/>");
        html.AppendLine($"<strong>Active:</strong> {(isActive ? "<span class='badge bg-success'>Active</span>" : "<span class='badge bg-secondary'>Inactive</span>")}<br/>");
        html.AppendLine($"<strong>Item Condition:</strong> {(isNewItem ? "<span class='badge bg-info'>New</span>" : "<span class='badge bg-warning'>Used</span>")}<br/>");
        html.AppendLine("</div>");

        // Description & Notes
        var description = productData.description ?? productData.Description;
        if (!string.IsNullOrEmpty(description?.ToString()))
        {
            html.AppendLine("<div class='mb-3'>");
            html.AppendLine("<h6 class='text-primary'>Description</h6>");
            html.AppendLine($"{description}");
            html.AppendLine("</div>");
        }

        // Image Information
        if (productData.imageData != null || productData.imageFileName != null)
        {
            html.AppendLine("<div class='alert alert-info mb-0'>");
            html.AppendLine($"<i class='fas fa-image'></i> Image attached: {productData.imageFileName ?? "product_image.jpg"}");
            html.AppendLine("</div>");
        }

        return html.ToString();
    }

    string ParseProductUpdateData(dynamic data)
    {
        var html = new System.Text.StringBuilder();
        var inventoryCode = data.InventoryCode ?? data.inventoryCode ?? "N/A";

        html.AppendLine($"<strong>Product:</strong> Inventory Code {inventoryCode}<br/>");

        // Parse UpdateData
        var updateData = data.UpdateData ?? data.updateData;

        // Show changes summary if available
        var changes = data.Changes;
        if (changes != null)
        {
            html.AppendLine("<h6 class='text-primary mt-3'>Summary of Changes:</h6>");
            html.AppendLine("<ul>");
            foreach (var change in changes)
            {
                html.AppendLine($"<li>{change}</li>");
            }
            html.AppendLine("</ul>");
        }

        return html.ToString();
    }

    string ParseProductDeleteData(dynamic data)
    {
        var html = new System.Text.StringBuilder();
        html.AppendLine("<div class='alert alert-warning'>");
        html.AppendLine("<i class='fas fa-exclamation-triangle'></i> <strong>Product to be Deleted:</strong>");
        html.AppendLine("</div>");

        html.AppendLine($"<strong>Inventory Code:</strong> {data.InventoryCode ?? data.inventoryCode ?? "N/A"}<br/>");
        html.AppendLine($"<strong>Model:</strong> {data.Model ?? data.model ?? "N/A"}<br/>");
        html.AppendLine($"<strong>Vendor:</strong> {data.Vendor ?? data.vendor ?? "N/A"}<br/>");
        html.AppendLine($"<strong>Department:</strong> {data.DepartmentName ?? data.departmentName ?? "N/A"}<br/>");

        if (data.DeleteReason != null)
        {
            html.AppendLine($"<br/><strong>Reason:</strong> {data.DeleteReason}");
        }

        return html.ToString();
    }

    string ParseProductTransferData(dynamic data)
    {
        var html = new System.Text.StringBuilder();

        // Product Information
        html.AppendLine("<div class='mb-3'>");
        html.AppendLine("<h6 class='text-primary'>Product Information</h6>");
        html.AppendLine($"<strong>Inventory Code:</strong> {data.inventoryCode ?? data.InventoryCode ?? "N/A"}<br/>");
        html.AppendLine($"<strong>Model:</strong> {data.productModel ?? data.ProductModel ?? "N/A"}<br/>");
        html.AppendLine($"<strong>Vendor:</strong> {data.productVendor ?? data.ProductVendor ?? "N/A"}<br/>");
        html.AppendLine("</div>");

        // Transfer Details
        html.AppendLine("<div class='mb-3'>");
        html.AppendLine("<h6 class='text-primary'>Transfer Details</h6>");
        html.AppendLine("<table class='table table-sm'>");
        html.AppendLine("<tr>");
        html.AppendLine("<td><strong>From:</strong></td>");
        html.AppendLine($"<td>{data.fromDepartmentName ?? data.FromDepartmentName ?? "Unknown"}<br/>");
        html.AppendLine($"<small class='text-muted'>Worker: {data.fromWorker ?? data.FromWorker ?? "Not assigned"}</small></td>");
        html.AppendLine("</tr>");
        html.AppendLine("<tr>");
        html.AppendLine("<td><strong>To:</strong></td>");
        html.AppendLine($"<td>{data.toDepartmentName ?? data.ToDepartmentName ?? "Unknown"}<br/>");
        html.AppendLine($"<small class='text-muted'>Worker: {data.toWorker ?? data.ToWorker ?? "Not assigned"}</small></td>");
        html.AppendLine("</tr>");
        html.AppendLine("</table>");
        html.AppendLine("</div>");

        // Notes
        var notes = data.notes ?? data.Notes;
        if (notes != null && notes.ToString() != "{}" && !string.IsNullOrWhiteSpace(notes.ToString()))
        {
            html.AppendLine("<div class='mb-3'>");
            html.AppendLine("<h6 class='text-primary'>Notes</h6>");
            html.AppendLine($"{notes}");
            html.AppendLine("</div>");
        }

        // Image
        if (data.imageData != null || data.imageFileName != null)
        {
            html.AppendLine("<div class='alert alert-info mb-0'>");
            html.AppendLine($"<i class='fas fa-image'></i> Transfer image attached");
            html.AppendLine("</div>");
        }

        return html.ToString();
    }

    bool GetBoolValue(dynamic obj, string camelCase, string pascalCase, bool defaultValue)
    {
        try
        {
            // Try camelCase first
            if (obj[camelCase] != null)
            {
                return (bool)obj[camelCase];
            }
        }
        catch { }

        try
        {
            // Try PascalCase
            if (obj[pascalCase] != null)
            {
                return (bool)obj[pascalCase];
            }
        }
        catch { }

        return defaultValue;
    }

    string FormatJson(dynamic data)
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(data, Newtonsoft.Json.Formatting.Indented);
    }

    string ParseRouteUpdateData(dynamic data)
    {
        var html = new System.Text.StringBuilder();

        // Route Information
        html.AppendLine("<div class='mb-3'>");
        html.AppendLine("<h6 class='text-primary'>Route Information</h6>");

        var routeId = data.RouteId ?? data.routeId ?? "Unknown";
        var inventoryCode = data.InventoryCode ?? data.inventoryCode ?? "N/A";
        var model = data.Model ?? data.model ?? "N/A";

        html.AppendLine($"<strong>Route ID:</strong> #{routeId}<br/>");
        html.AppendLine($"<strong>Product:</strong> {inventoryCode} - {model}<br/>");

        // Show transfer route if available
        var fromDept = data.FromDepartmentName ?? data.fromDepartmentName;
        var toDept = data.ToDepartmentName ?? data.toDepartmentName;
        if (fromDept != null && toDept != null)
        {
            html.AppendLine($"<strong>Route:</strong> {fromDept} → {toDept}<br/>");
        }

        html.AppendLine("</div>");

        // Update Details
        var updateData = data.UpdateData ?? data.updateData;
        if (updateData != null)
        {
            html.AppendLine("<div class='mb-3'>");
            html.AppendLine("<h6 class='text-primary'>Updates to Apply</h6>");

            // Check for notes update
            var notes = updateData.notes ?? updateData.Notes;
            if (notes != null && notes.ToString() != "{}")
            {
                html.AppendLine($"<strong>Notes:</strong><br/>");
                html.AppendLine($"<div class='bg-light p-2 rounded'>{notes}</div>");
            }

            // Check for image update
            if (updateData.imageData != null || updateData.imageFileName != null)
            {
                var fileName = updateData.imageFileName ?? updateData.ImageFileName ?? "route_image.jpg";
                html.AppendLine($"<div class='alert alert-info mt-2'>");
                html.AppendLine($"<i class='fas fa-image'></i> New route image will be uploaded: {fileName}");
                html.AppendLine("</div>");
            }

            // Show changes summary if available
            var changesSummary = updateData.changesSummary ?? updateData.ChangesSummary;
            if (changesSummary != null && changesSummary.ToString() != "")
            {
                html.AppendLine($"<strong>Summary:</strong> {changesSummary}");
            }

            html.AppendLine("</div>");
        }

        // Show the Changes field if it exists (from the approval request)
        var changes = data.Changes ?? data.changes;
        if (changes != null && changes.ToString() != "")
        {
            html.AppendLine("<div class='alert alert-warning mb-0'>");
            html.AppendLine($"<strong>Changes:</strong> {changes}");
            html.AppendLine("</div>");
        }

        return html.ToString();
    }

    string ParseRouteDeleteData(dynamic data)
    {
        var html = new System.Text.StringBuilder();

        // Warning message
        html.AppendLine("<div class='alert alert-danger'>");
        html.AppendLine("<i class='fas fa-exclamation-triangle'></i> <strong>Route to be Deleted</strong>");
        html.AppendLine("</div>");

        // Route details
        html.AppendLine("<div class='mb-3'>");
        html.AppendLine("<h6 class='text-primary'>Route Information</h6>");

        var routeId = data.RouteId ?? data.routeId ?? "Unknown";
        var routeType = data.RouteType ?? data.routeType ?? "Transfer";
        var productInfo = data.ProductInfo ?? data.productInfo ?? "Unknown Product";
        var fromLocation = data.FromLocation ?? data.fromLocation ?? "N/A";
        var toLocation = data.ToLocation ?? data.toLocation ?? "N/A";
        var createdDate = data.CreatedDate ?? data.createdDate;
        var isCompleted = GetBoolValue(data, "isCompleted", "IsCompleted", false);

        html.AppendLine($"<strong>Route ID:</strong> #{routeId}<br/>");
        html.AppendLine($"<strong>Type:</strong> <span class='badge bg-info'>{routeType}</span><br/>");
        html.AppendLine($"<strong>Product:</strong> {productInfo}<br/>");
        html.AppendLine($"<strong>From:</strong> {fromLocation}<br/>");
        html.AppendLine($"<strong>To:</strong> {toLocation}<br/>");

        if (createdDate != null)
        {
            try
            {
                var date = DateTime.Parse(createdDate.ToString());
                html.AppendLine($"<strong>Created:</strong> {date:MM/dd/yyyy HH:mm}<br/>");
            }
            catch
            {
                html.AppendLine($"<strong>Created:</strong> {createdDate}<br/>");
            }
        }

        html.AppendLine($"<strong>Status:</strong> {(isCompleted ? "<span class='badge bg-success'>Completed</span>" : "<span class='badge bg-warning'>Pending</span>")}<br/>");
        html.AppendLine("</div>");

        // Deletion reason if provided
        var deleteReason = data.DeleteReason ?? data.deleteReason ?? data.Reason ?? data.reason;
        if (deleteReason != null && deleteReason.ToString() != "")
        {
            html.AppendLine("<div class='mb-3'>");
            html.AppendLine("<h6 class='text-primary'>Deletion Reason</h6>");
            html.AppendLine($"{deleteReason}");
            html.AppendLine("</div>");
        }

        // Warning for completed routes
        if (isCompleted)
        {
            html.AppendLine("<div class='alert alert-warning mb-0'>");
            html.AppendLine("<i class='fas fa-info-circle'></i> <strong>Note:</strong> This is a completed route. Deleting completed routes is generally not recommended as they form part of the audit trail.");
            html.AppendLine("</div>");
        }

        return html.ToString();
    }
}