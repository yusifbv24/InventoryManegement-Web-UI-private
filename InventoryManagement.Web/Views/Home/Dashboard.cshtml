@model DashboardViewModel
@{
    var currentPeriod = ViewBag.CurrentPeriod as string ?? "last7days";
    var totalDepartments = ViewBag.TotalDepartments ?? 0;
    var totalCategories = ViewBag.TotalCategories ?? 0;
    var activeDepartmentsInPeriod = ViewBag.ActiveDepartmentsInPeriod ?? 0;
    var activeCategoriesInPeriod = ViewBag.ActiveCategoriesInPeriod ?? 0;
    var startDate = ViewBag.PeriodStartDate as DateTime?;
    var endDate = ViewBag.PeriodEndDate as DateTime?;

    // Determine period display name
    var periodName = currentPeriod switch
    {
        "last7days" => "Last 7 Days",
        "last30days" => "Last 30 Days",
        "last6months" => "Last 6 Months",
        "all" => "All Time",
        _ => "Last 7 Days"
    };
}

<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">Dashboard</h1>
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-secondary btn-sm @(currentPeriod == "last7days" ? "active" : "")"
                    onclick="changePeriod('last7days')">
                Last 7 Days
            </button>
            <button type="button" class="btn btn-outline-secondary btn-sm @(currentPeriod == "last30days" ? "active" : "")"
                    onclick="changePeriod('last30days')">
                Last 30 Days
            </button>
            <button type="button" class="btn btn-outline-secondary btn-sm @(currentPeriod == "last6months" ? "active" : "")"
                    onclick="changePeriod('last6months')">
                Last 6 Months
            </button>
            <button type="button" class="btn btn-outline-secondary btn-sm @(currentPeriod == "all" ? "active" : "")"
                    onclick="changePeriod('all')">
                All Time
            </button>
        </div>
    </div>

    <!-- Period Info Banner -->
    @if (startDate.HasValue && endDate.HasValue)
    {
        <div class="alert alert-info mb-4">
            <i class="fas fa-calendar-alt me-2"></i>
            <strong>Viewing:</strong> @periodName
            <span class="mx-2">|</span>
            <strong>Date Range:</strong> @startDate.Value.ToString("MMM dd, yyyy") - @endDate.Value.ToString("MMM dd, yyyy")
            @if (currentPeriod != "all")
            {
                <span class="ms-3"><em>(Showing transfer activity and new products for this period)</em></span>
            }
        </div>
    }

    <!-- Key Metrics -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="text-muted mb-2">
                                @if (currentPeriod == "all")
                                {
                                    <text>Total Products</text>
                                }
                                else
                                {
                                    <text>New Products Added</text>
                                }
                            </p>
                            <h3 class="mb-0">@Model.TotalProducts.ToString("N0")</h3>
                            <p class="text-success mb-0">
                                <i class="fas fa-check-circle"></i> @Model.ActiveProducts active
                            </p>
                        </div>
                        <div class="rounded-circle bg-primary-soft text-primary p-3">
                            <i class="fas fa-boxes fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="text-muted mb-2">Total Transfers</p>
                            <h3 class="mb-0">@Model.TotalRoutes.ToString("N0")</h3>
                            <p class="text-warning mb-0">
                                <i class="fas fa-hourglass-half"></i> @Model.PendingTransfers pending
                            </p>
                        </div>
                        <div class="rounded-circle bg-success-soft text-success p-3">
                            <i class="fas fa-exchange-alt fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="text-muted mb-2">Departments</p>
                            <h3 class="mb-0">@totalDepartments</h3>
                            <p class="text-info mb-0">
                                <i class="fas fa-chart-line"></i> @activeDepartmentsInPeriod active in period
                            </p>
                        </div>
                        <div class="rounded-circle bg-info-soft text-info p-3">
                            <i class="fas fa-building fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="text-muted mb-2">Categories</p>
                            <h3 class="mb-0">@totalCategories</h3>
                            <p class="text-secondary mb-0">
                                <i class="fas fa-chart-line"></i> @activeCategoriesInPeriod active in period
                            </p>
                        </div>
                        <div class="rounded-circle bg-warning-soft text-warning p-3">
                            <i class="fas fa-tags fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row mb-4">
        <div class="col-xl-8">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Transfer Activity (@periodName)</h5>
                        <small class="text-muted">Completed vs Pending</small>
                    </div>
                </div>
                <div class="card-body">
                    @if (Model.TransferActivityData.Labels.Any())
                    {
                        <div class="chart-container" style="position: relative; height: 300px;">
                            <canvas id="transferChart"></canvas>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No transfer activity for this period</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-xl-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Categories in Transfers</h5>
                    <small class="text-muted">Products transferred by category</small>
                </div>
                <div class="card-body">
                    @if (Model.CategoryDistributions.Any())
                    {
                        <div class="chart-container" style="position: relative; height: 250px;">
                            <canvas id="categoryChart"></canvas>
                        </div>
                        <!-- Legend -->
                        <div class="mt-3">
                            @foreach (var category in Model.CategoryDistributions)
                            {
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div class="d-flex align-items-center">
                                        <div class="me-2" style="width: 18px; height: 18px; background-color: @category.Color; border-radius: 3px;"></div>
                                        <small><strong>@category.CategoryName</strong></small>
                                    </div>
                                    <small class="text-muted"><strong>@category.Count</strong> transfers</small>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-chart-pie fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No transfers for this period</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Department Performance -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Top Departments by Transfer Activity</h5>
                    <small class="text-muted">Departments with the most transfer activity during @periodName.ToLower()</small>
                </div>
                <div class="card-body">
                    @if (Model.DepartmentStats.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead>
                                    <tr>
                                        <th>Department</th>
                                        <th class="text-center">
                                            <i class="fas fa-exchange-alt me-1"></i>
                                            Total Transfers
                                        </th>
                                        <th class="text-center">
                                            <i class="fas fa-box me-1"></i>
                                            Unique Products
                                        </th>
                                        <th class="text-center">
                                            <i class="fas fa-users me-1"></i>
                                            Active Workers
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var dept in Model.DepartmentStats)
                                    {
                                        <tr>
                                            <td>
                                                <i class="fas fa-building text-primary me-2"></i>
                                                <strong>@dept.DepartmentName</strong>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge bg-primary rounded-pill px-3">@dept.PeriodTransfers</span>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge bg-success rounded-pill px-3">@dept.ProductCount</span>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge bg-info rounded-pill px-3">@dept.ActiveWorkers</span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="mt-3">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                <strong>Note:</strong> "Active" means the department participated in at least one transfer during this period.
                            </small>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-building fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No department activity for this period</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let transferChart, categoryChart;
        const currentPeriod = '@currentPeriod';

        $(document).ready(function() {
            initializeCharts();
            initializeTooltips();
        });

        function initializeTooltips() {
            $('[data-bs-toggle="tooltip"]').tooltip();
        }

        function changePeriod(period) {
            if (period === currentPeriod) return;

            showLoadingOverlay();
            window.location.href = '/Home/Dashboard?period=' + period;
        }

        function showLoadingOverlay() {
            const overlay = `
                <div class="position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center"
                     style="background: rgba(255,255,255,0.95); z-index: 9999;">
                    <div class="text-center">
                        <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <h5>Loading dashboard data...</h5>
                        <p class="text-muted">Please wait</p>
                    </div>
                </div>
            `;
            $('body').append(overlay);
        }

        function initializeCharts() {
            initializeCategoryChart();
            initializeTransferChart();
        }

        function initializeCategoryChart() {
            const ctx = document.getElementById('categoryChart');
            if (!ctx) return;

            const categoryData = @Html.Raw(Json.Serialize(Model.CategoryDistributions));
            if (!categoryData || categoryData.length === 0) return;

            categoryChart = new Chart(ctx.getContext('2d'), {
                type: 'doughnut',
                data: {
                    labels: categoryData.map(c => c.categoryName),
                    datasets: [{
                        data: categoryData.map(c => c.count),
                        backgroundColor: categoryData.map(c => c.color),
                        borderWidth: 3,
                        borderColor: '#fff',
                        hoverOffset: 10
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            padding: 12,
                            titleFont: { size: 14, weight: 'bold' },
                            bodyFont: { size: 13 },
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed || 0;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${label}: ${value} transfers (${percentage}%)`;
                                }
                            }
                        }
                    },
                    cutout: '65%'
                }
            });
        }

        function initializeTransferChart() {
            const ctx = document.getElementById('transferChart');
            if (!ctx) return;

            const transferData = @Html.Raw(Json.Serialize(Model.TransferActivityData));
            if (!transferData || !transferData.labels || transferData.labels.length === 0) return;

            transferChart = new Chart(ctx.getContext('2d'), {
                type: 'line',
                data: {
                    labels: transferData.labels,
                    datasets: [
                        {
                            label: 'Completed',
                            data: transferData.completedData,
                            borderColor: '#10B981',
                            backgroundColor: 'rgba(16, 185, 129, 0.15)',
                            tension: 0.4,
                            fill: true,
                            pointRadius: 5,
                            pointHoverRadius: 7,
                            pointBackgroundColor: '#10B981',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2
                        },
                        {
                            label: 'Pending',
                            data: transferData.pendingData,
                            borderColor: '#F59E0B',
                            backgroundColor: 'rgba(245, 158, 11, 0.15)',
                            tension: 0.4,
                            fill: true,
                            pointRadius: 5,
                            pointHoverRadius: 7,
                            pointBackgroundColor: '#F59E0B',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                usePointStyle: true,
                                padding: 15,
                                font: { size: 12, weight: 'bold' }
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            padding: 12,
                            titleColor: '#fff',
                            bodyColor: '#fff',
                            titleFont: { size: 14, weight: 'bold' },
                            bodyFont: { size: 13 }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1,
                                precision: 0,
                                font: { size: 11 }
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.05)',
                                drawBorder: false
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                font: { size: 11 }
                            }
                        }
                    }
                }
            });
        }
    </script>
    <style>
        .bg-primary-soft {
            background-color: rgba(59, 130, 246, 0.1);
        }

        .bg-success-soft {
            background-color: rgba(16, 185, 129, 0.1);
        }

        .bg-info-soft {
            background-color: rgba(6, 182, 212, 0.1);
        }

        .bg-warning-soft {
            background-color: rgba(245, 158, 11, 0.1);
        }

        .card {
            transition: all 0.3s ease;
            border: 1px solid rgba(0,0,0,0.05);
        }

            .card:hover {
                transform: translateY(-4px);
                box-shadow: 0 0.5rem 1.5rem rgba(0,0,0,0.1) !important;
            }

        .badge {
            font-size: 0.875rem;
            padding: 0.5em 0.85em;
            font-weight: 600;
        }

        .table thead th {
            background-color: #f8f9fa;
            border-bottom: 2px solid #dee2e6;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.5px;
        }

        .table tbody tr {
            transition: background-color 0.2s ease;
        }

            .table tbody tr:hover {
                background-color: rgba(59, 130, 246, 0.05);
            }
    </style>
}