<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@(ViewData["Title"] ?? "Inventory Pro")</title>

    <!-- Modern Font -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <!-- DataTables -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/modern-ui.css" asp-append-version="true" />
    @await RenderSectionAsync("Styles", required: false)

</head>
<body>
    <div class="layout-wrapper" id="wrapper">
        <!-- Sidebar -->
        @if (User.Identity?.IsAuthenticated ?? false)
        {
            <partial name="_Sidebar" />
            <!-- Overlay for mobile -->
            <div class="sidebar-overlay" onclick="toggleSidebar()"></div>
        }

        <!-- Main Content -->
        <div class="main-content" id="page-content-wrapper">
            <!-- Modern Top Navigation -->
            <nav class="navbar navbar-expand-lg navbar-light top-navbar">
                <div class="container-fluid px-4">
                    <div class="d-flex align-items-center">
                        @if (User.Identity?.IsAuthenticated ?? false)
                        {
                            <button class="btn btn-link sidebar-toggle" id="menu-toggle">
                                <i class="fas fa-bars"></i>
                            </button>
                        }

                        <div class="navbar-brand-wrapper">
                            <a class="navbar-brand" href="/">
                                <img src="/inventory.png" alt="Logo" height="32" class="me-2" />
                                <span class="brand-text">Inventory Pro</span>
                            </a>
                        </div>
                    </div>

                    <div class="navbar-nav ms-auto d-flex align-items-center">
                        @if (User.Identity?.IsAuthenticated ?? false)
                        {
                            <div class="nav-item dropdown me-3">
                                <a class="nav-link notification-toggle" href="#" id="notificationIcon"
                                   data-bs-toggle="dropdown">
                                    <div class="icon-badge">
                                        <i class="far fa-bell"></i>
                                        <span id="notificationBadge" class="badge-dot" style="display:none;"></span>
                                    </div>
                                </a>
                                <div class="dropdown-menu dropdown-menu-end notification-dropdown modern-dropdown">
                                    <div class="dropdown-header">
                                        <h6 class="mb-0">Notifications</h6>
                                        <a href="/Notifications" class="text-primary">View All</a>
                                    </div>
                                    <div id="notificationList" class="notification-list">
                                        <div class="text-center py-3">
                                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="dropdown-footer">
                                        <a href="#" id="markAllAsRead" class="text-muted">
                                            Mark all as read
                                        </a>
                                    </div>
                                </div>
                            </div>

                            <!-- User Menu -->
                            <div class="nav-item dropdown">
                                <a class="nav-link user-menu-toggle" href="#" id="userDropdown"
                                   data-bs-toggle="dropdown">
                                    <div class="user-avatar">
                                        <span>@User.Identity.Name?.Substring(0, 1).ToUpper()</span>
                                    </div>
                                    <span class="user-name d-none d-md-inline ms-2">@User.Identity.Name</span>
                                    <i class="fas fa-chevron-down ms-1 small"></i>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end modern-dropdown">
                                    <li>
                                        <a class="dropdown-item" href="/Account/Profile">
                                            <i class="fas fa-user-circle me-2"></i> My Profile
                                        </a>
                                    </li>
                                    @if (User.IsInRole("Admin"))
                                    {
                                        <li>
                                            <a class="dropdown-item" href="/Approvals">
                                                <i class="fas fa-check-circle me-2"></i> Approvals
                                                <span class="badge bg-warning ms-auto" id="pendingApprovalsCount"></span>
                                            </a>
                                        </li>
                                    }
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <form asp-controller="Account" asp-action="Logout" method="post">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="dropdown-item text-danger">
                                                <i class="fas fa-sign-out-alt me-2"></i> Sign Out
                                            </button>
                                        </form>
                                    </li>
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            </nav>

            <!-- Page Content -->
            <div class="page-content">
                @RenderBody()
            </div>

            <!-- Modern Footer -->
            <footer class="modern-footer">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-6">
                            <span class="text-muted">© @DateTime.Today.Year Inventory Pro. All rights reserved.</span>
                        </div>
                    </div>
                </div>
            </footer>
        </div>
    </div>

    <!-- Toast Container -->
    <div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
    </div>

    <!-- Global Image Modal -->
    <div class="modal fade" id="globalImageModal" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-centered" style="max-width: 900px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Image Preview</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body text-center p-0" style="max-height: 70vh; overflow: auto;">
                    <img id="globalModalImage" class="img-fluid" alt="Preview"
                         style="max-width: 100%; max-height: 65vh; width: auto; height: auto;">
                </div>
            </div>
        </div>
    </div>

    <input type="hidden" id="jwtToken" value="@Context.Session.GetString("JwtToken")" />

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="~/js/app-config.js" asp-append-version="true"></script>
    @if (User.IsInRole("Admin"))
    {
        <script src="~/js/admin-approvals.js" asp-append-version="true"></script>
    }
    <script>
         // Global notification variables
         let notificationConnection = null;
         let reconnectAttempts = 0;
         const maxReconnectAttempts = 5;

         // Store whether user is admin for JavaScript usage
         const isAdmin=@(User.IsInRole("Admin") ? "true" : "false");

         $(document).ready(function() {
             // Sidebar toggle
             $('#menu-toggle').click(function(e) {
             e.preventDefault();
             $('body').toggleClass('sidebar-toggled');
             $('#wrapper').toggleClass('toggled');

             // Adjust main content margin
             if ($('#wrapper').hasClass('toggled')) {
                 $('.main-content').css('margin-left', '0');
             } else {
                 $('.main-content').css('margin-left', 'var(--sidebar-width)');
             }
         });

             // Only initialize notifications if user is authenticated
         const jwtToken=$('#jwtToken').val();
             if (jwtToken) {
                 initializeNotifications();
                 setupNotificationHandlers();
                 loadNotificationCount();
                 loadRecentNotifications();

                 // Check for pending approvals if admin
                 if (isAdmin) {
                     loadPendingApprovalsCount();
                 }
             }
         });

         function initializeNotifications() {
             const token = $('#jwtToken').val();
             if (!token) {
                 console.error('No JWT token available');
                 return;
             }

             const hubUrl = window.location.protocol + '//' + window.location.host + '/notificationHub';

             window.notificationConnection = new signalR.HubConnectionBuilder()
                 .withUrl(hubUrl, {
                     accessTokenFactory: () => $('#jwtToken').val(),
                     transport: signalR.HttpTransportType.WebSockets |
                               signalR.HttpTransportType.ServerSentEvents |
                               signalR.HttpTransportType.LongPolling
                 })
                 .withAutomaticReconnect({
            nextRetryDelayInMilliseconds: retryContext => {
                if (retryContext.elapsedMilliseconds < 60000) {
                    // If we've been reconnecting for less than 60 seconds, retry quickly
                    return Math.min(1000 * Math.pow(2, retryContext.previousRetryCount), 10000);
                } else {
                    // If we've been reconnecting for more than 60 seconds, retry every 10 seconds
                    return 10000;
                }
            }
        })
        .configureLogging(signalR.LogLevel.Information)
        .build();

            // Set up handlers before starting
             setupMessageHandlers();

            // Start connection with retry logic
             startConnectionWithRetry();
         }


         // Setup SignalR message handlers
         function setupMessageHandlers() {
             if (!window.notificationConnection) return;

            // Handle incoming notifications
            window.notificationConnection.on("ReceiveNotification", function(notification) {
                 console.log('Notification received:', notification);

                 if (!notification.isTest && !notification.silent) {
                    playNotificationSound();
                    showToast(`${notification.title}: ${notification.message}`,
                    getNotificationType(notification.type));
                }

                 // Update notification count badge
                 incrementNotificationCount();

                 loadRecentNotifications(); // Refresh the dropdown

                 // Update pending approvals count for admin users
                 if (isAdmin && notification.type === 'ApprovalRequest') {
                    loadPendingApprovalsCount();

                    // If on approvals page, refresh the list
                    if (window.location.pathname.includes('/Approvals')) {
                        if (typeof refreshApprovalsList === 'function') {
                            refreshApprovalsList();
                        }
                    }
                }
             });

             // Handle connection established (fix casing)
            window.notificationConnection.onreconnected(function(connectionId) {
            console.log('SignalR reconnected:', connectionId);

            // Re-join user group after reconnection
            window.notificationConnection.invoke("JoinUserGroup")
                .catch(err => console.error('Error joining user group:', err));

            // Reload notifications after reconnect
            loadRecentNotifications();
            loadNotificationCount();
            });

            // Handle disconnection
            window.notificationConnection.onclose(function(error) {
                console.warn('SignalR disconnected:', error);

                    // Attempt to reconnect after 5 seconds
                    setTimeout(() => {
                        startConnectionWithRetry();
                    }, 5000);
                });
            }


         // Start SignalR connection
         function startConnectionWithRetry(retryCount = 0) {
             if (window.notificationConnection.state === signalR.HubConnectionState.Connected) {
                 console.log('SignalR already connected');
                 return;
             }

             window.notificationConnection.start()
                .then(() => {
                    console.log('SignalR connected successfully');
                    reconnectAttempts = 0;

                    // Join user group immediately after connection
                    window.notificationConnection.invoke("JoinUserGroup")
                        .then(() => console.log('Joined user group successfully'))
                        .catch(err => console.error('Error joining user group:', err));
                })
                .catch(err => {
                    console.error('SignalR connection error:', err);
                    if (retryCount < 5) {
                        const delay = Math.min(1000 * Math.pow(2, retryCount), 10000);
                        console.log(`Retrying connection in ${delay}ms...`);
                        setTimeout(() => startConnectionWithRetry(retryCount + 1), delay);
                    } else {
                        console.error('Failed to establish SignalR connection after 5 attempts');
                    }
                });
        }


         function testSignalRConnection() {
             // Send a test message to verify connection
             if (window.notificationConnection.state === signalR.HubConnectionState.Connected) {
                 console.log('SignalR connection test: Connected');
             }
         }

         // Fixed notification sound function
         function playNotificationSound() {
            try {
                const audio = new Audio('/sounds/notify.mp3');
                audio.volume = 0.5;

                const playPromise = audio.play();
                if (playPromise !== undefined) {
                    playPromise.catch(error => {
                        console.log('Could not play notification sound:', error);
                        // Try playing after user interaction if blocked
                        $(document).one('click', function() {
                            audio.play().catch(e => console.log('Audio still blocked:', e));
                        });
                    });
                }
            } catch (error) {
                console.error('Error playing notification sound:', error);
            }
        }

         function setupNotificationHandlers() {
             // Notification bell click handler
             $('#notificationIcon').on('click', function(e) {
                 e.preventDefault();
                 loadRecentNotifications();
             });

             // Mark all as read handler
             $('#markAllAsRead').on('click', function(e) {
                 e.preventDefault();
                 markAllAsRead();
             });
         }

         function loadNotificationCount() {
             $.ajax({
                 url: '/Notifications/GetUnreadCount',
                 type: 'GET',
                 success: function(count) {
                     updateNotificationBadge(count);
                 },
                 error: function(xhr, status, error) {
                     console.error('Failed to load notification count:', error);
                 }
             });
         }

         function loadRecentNotifications() {
             $('#notificationList').html(`
                 <div class="text-center py-3">
                     <div class="spinner-border spinner-border-sm text-primary" role="status">
                         <span class="visually-hidden">Loading...</span>
                     </div>
                 </div>
             `);

             $.ajax({
                 url: '/Notifications/GetRecentNotifications',
                 type: 'GET',
                 success: function(notifications) {
                     renderNotifications(notifications);
                 },
                 error: function(xhr, status, error) {
                     console.error('Failed to load notifications:', error);
                     $('#notificationList').html(`
                         <div class="notification-empty">
                             <i class="fas fa-exclamation-circle"></i>
                             <p class="mb-0">Failed to load notifications</p>
                         </div>
                     `);
                 }
             });
         }

         function renderNotifications(notifications) {
             let html = '';

             if (!notifications || notifications.length === 0) {
                 html = `
                     <div class="notification-empty">
                         <i class="fas fa-bell-slash"></i>
                         <p class="mb-0">No new notifications</p>
                     </div>
                 `;
             } else {
                 notifications.forEach(function(notification) {
                     html += createNotificationItem(notification);
                 });
             }

             $('#notificationList').html(html);
         }

         function createNotificationItem(notification) {
             const timeAgo = formatTimeAgo(notification.createdAt);
             const unreadClass = notification.isRead ? '' : 'unread';
             const icon = getNotificationIcon(notification.type);
             const iconColor = getNotificationIconColor(notification.type);

             return `
                 <div class="notification-item ${unreadClass}" data-id="${notification.id}" onclick="markAsRead(${notification.id})">
                     <div class="d-flex align-items-start">
                         <div class="notification-icon ${iconColor} me-3">
                             <i class="${icon} text-white"></i>
                         </div>
                         <div class="notification-content">
                             <h6>${escapeHtml(notification.title)}</h6>
                             <p>${escapeHtml(notification.message)}</p>
                             <div class="notification-time">
                                 <i class="fas fa-clock me-1"></i>
                                 ${timeAgo}
                                 ${!notification.isRead ? '<span class="notification-dot ms-2"></span>' : ''}
                             </div>
                         </div>
                     </div>
                 </div>
             `;
         }

         function markAsRead(notificationId) {
             $.ajax({
                 url: '/Notifications/MarkAsRead',
                 type: 'POST',
                 data: JSON.stringify(notificationId),
                 contentType: 'application/json',
                 headers: {
                     'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').first().val(),
                     'Content-Type': 'application/json'
                 },
                 success: function(response) {
                         $(`.notification-item[data-id="${notificationId}"]`).removeClass('unread');
                             loadNotificationCount();
                 },
                 error: function(xhr, status, error) {
                         const errorMessage = ErrorHandler.parseErrorMessage(xhr, 'Failed to mark notification as read');
                         showToast(errorMessage, 'error');
                 }
             });
         }

         function markAllAsRead() {
                          // Find the first available CSRF token
             var token = $('input[name="__RequestVerificationToken"]').first().val();
                  if (!token) {
             // If no token found in forms, create a temporary form to get one
             var tempForm = $('<form>').html('@Html.AntiForgeryToken()');
             token = tempForm.find('input[name="__RequestVerificationToken"]').val();
             }
                     $.ajax({
                 url: '/Notifications/MarkAllAsRead',
                 type: 'POST',
                 headers: {
                     'RequestVerificationToken': token
                 },
                 success: function(response) {
                     $('.notification-item').removeClass('unread');
                     $('.notification-dot').remove();
                     updateNotificationBadge(0);
                     showToast('All notifications marked as read', 'success');

                     // Reload notifications if dropdown is open
                     if ($('.notification-dropdown').hasClass('show')) {
                         loadRecentNotifications();
                     }
                 },
                 error: function(xhr, status, error) {
                     console.error('Mark all as read failed:', xhr.responseText);
                     showToast('Failed to mark notifications as read', 'error');
                 }
             });
         }

         function updateNotificationBadge(count) {
             const $badge = $('#notificationBadge');
             const $sidebarBadge = $('#sidebarUnreadCount');
             count = parseInt(count) || 0;

             if (count > 0) {
                 $badge.text(count > 99 ? '99+' : count).show();
                 $sidebarBadge.text(count > 99 ? '99+' : count).show();
             } else {
                 $badge.hide();
                 $sidebarBadge.hide();
             }
         }

         function incrementNotificationCount() {
             const $badge = $('#notificationBadge');
             const current = parseInt($badge.text()) || 0;
             updateNotificationBadge(current + 1);
         }

         function decrementNotificationCount() {
             const $badge = $('#notificationBadge');
             const current = parseInt($badge.text()) || 0;
             if (current > 0) {
                 updateNotificationBadge(current - 1);
             }
         }

         // Helper functions
         function formatTimeAgo(dateString) {
             const date = new Date(dateString);
             const now = new Date();
             const diffMs = now - date;
             const diffSecs = Math.floor(diffMs / 1000);
             const diffMins = Math.floor(diffSecs / 60);
             const diffHours = Math.floor(diffMins / 60);
             const diffDays = Math.floor(diffHours / 24);

             if (diffSecs < 60) return 'just now';
             if (diffMins < 60) return `${diffMins}m ago`;
             if (diffHours < 24) return `${diffHours}h ago`;
             if (diffDays < 30) return `${diffDays}d ago`;

             return date.toLocaleDateString('en-US', {
                 month: 'short',
                 day: 'numeric',
                 year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined
             });
         }

         function getNotificationIcon(type) {
             const icons = {
                 'ApprovalRequest': 'fas fa-clock',
                 'ApprovalResponse': 'fas fa-check-circle',
                 'ProductUpdate': 'fas fa-box',
                 'RouteUpdate': 'fas fa-route',
                 'RouteCompleted':'fas fa-check-double',
                 'TransferCompleted':'fas fa-exchange-alt',
                 'System': 'fas fa-info-circle'
             };
             return icons[type] || 'fas fa-bell';
         }

         function getNotificationType(type) {
             const types = {
                 'ApprovalRequest': 'warning',
                 'ApprovalResponse': 'success',
                 'ProductUpdate': 'info',
                 'RouteUpdate': 'info',
                 'RouteCompleted': 'success',
                 'TransferCompleted': 'success',
                 'System': 'secondary'
             };
             return types[type] || 'info';
         }

         function getNotificationIconColor(type) {
             const colors = {
                 'ApprovalRequest': 'bg-warning',
                 'ApprovalResponse': 'bg-success',
                 'ProductUpdate': 'bg-info',
                 'RouteUpdate': 'bg-primary',
                 'RouteCompleted':'bg-success',
                 'TransferCompleted':'bg-success',
                 'System': 'bg-secondary'
             };
             return colors[type] || 'bg-primary';
         }

         function escapeHtml(text) {
             const map = {
                 '&': '&amp;',
                 '<': '&lt;',
                 '>': '&gt;',
                 '"': '&quot;',
                 "'": '&#039;'
             };
             return text.replace(/[&<>"']/g, m => map[m]);
         }

         function toggleSidebar() {
               document.body.classList.toggle('sidebar-open');
          }
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>